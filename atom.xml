<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gehan Zheng&#39;s blog</title>
  
  
  <link href="https://grahamzen.github.io/atom.xml" rel="self"/>
  
  <link href="https://grahamzen.github.io/"/>
  <updated>2024-10-30T07:03:23.108Z</updated>
  <id>https://grahamzen.github.io/</id>
  
  <author>
    <name>Gehan Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hermite Interpolation</title>
    <link href="https://grahamzen.github.io/2024/10/30/hermite-interpolation/"/>
    <id>https://grahamzen.github.io/2024/10/30/hermite-interpolation/</id>
    <published>2024-10-30T04:52:19.000Z</published>
    <updated>2024-10-30T07:03:23.108Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;hermite插值多项式&quot;&gt;Hermite插值多项式&lt;/h2&gt;
&lt;p&gt;Hermite插值是一种插值方法，可以通过给定的点和导数值构造插值多项式。给定点&lt;span
class=&quot;math inline&quot;&gt;&#92;((x_0,y_0),(x_1,y_1),...,(x_n,y_n)&#92;)&lt;/span&gt;和导数值&lt;span
class=&quot;math inline&quot;&gt;&#92;(y&amp;#39;_0,y&amp;#39;_1,...,y&amp;#39;_n&#92;)&lt;/span&gt;，可以构造插值多项式。本文介绍如何使用Newton差商生成Hermite插值多项式。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5620" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/CIS-5620/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="几何处理" scheme="https://grahamzen.github.io/tags/%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5620" scheme="https://grahamzen.github.io/tags/CIS-5620/"/>
    
    <category term="Hermite" scheme="https://grahamzen.github.io/tags/Hermite/"/>
    
  </entry>
  
  <entry>
    <title>Point triangle distance</title>
    <link href="https://grahamzen.github.io/2024/09/15/point-triangle-distance/"/>
    <id>https://grahamzen.github.io/2024/09/15/point-triangle-distance/</id>
    <published>2024-09-15T06:17:09.000Z</published>
    <updated>2024-09-15T07:26:30.561Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;该文章中的c++代码参考了&lt;a
href=&quot;https://github.com/ipc-sim/ipc-toolkit&quot;&gt;ipc-toolkit&lt;/a&gt;的实现。&lt;/p&gt;
&lt;p&gt;点到三角形的距离可以用如下定义：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;begin{aligned}
&#92;text{distance}(&#92;vec{&#92;mathbf{x_p}}, &#92;vec{&#92;mathbf{x_t}_1},
&#92;vec{&#92;mathbf{x_t}_2}, &#92;vec{&#92;mathbf{x_t}_3}) &amp;amp;= &#92;min_{&#92;beta_1,
&#92;beta_2} &#92;left&#92;| &#92;vec{&#92;mathbf{x_p}} - ( &#92;vec{&#92;mathbf{x_t}_1} + &#92;beta_1
(&#92;vec{&#92;mathbf{x_t}_2} - &#92;vec{&#92;mathbf{x_t}_1}) + &#92;beta_2
(&#92;vec{&#92;mathbf{x_t}_3} - &#92;vec{&#92;mathbf{x_t}_1}) ) &#92;right&#92;| &#92;&#92;&amp;amp;s.t.
&#92;beta_1 &#92;geq 0, &#92;beta_2 &#92;geq 0, &#92;beta_1 + &#92;beta_2 &#92;leq 1
&#92;end{aligned}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这是一个分断连续的函数，实际计算时可以根据点和三角形的位置关系分以下几种情况讨论，首先要将点投影到三角形所在的平面上：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;投影后，点在三角形内部，此时距离为点到三角形所在平面的距离。&lt;/li&gt;
&lt;li&gt;投影后，点在三角形的某个边朝外的半平面且投影在边上的点在边上，此时距离为点到边的距离。&lt;/li&gt;
&lt;li&gt;其他情况，此时距离为点到三角形的三个顶点的最小距离。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="几何" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%87%A0%E4%BD%95/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="几何" scheme="https://grahamzen.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Stress hessian computation in FEM</title>
    <link href="https://grahamzen.github.io/2024/08/08/stress-hessian/"/>
    <id>https://grahamzen.github.io/2024/08/08/stress-hessian/</id>
    <published>2024-08-08T10:05:16.000Z</published>
    <updated>2024-12-27T11:49:24.755Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;在进行软体模拟时，如果使用牛顿法计算最优的下降方向，需要计算能量密度函数&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;Psi&#92;)&lt;/span&gt;关于位置&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;vec {&#92;mathbf{x}}&#92;)&lt;/span&gt; 的Hessian矩阵，即&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;frac{&#92;partial^2 &#92;Psi}{&#92;partial &#92;vec
{&#92;mathbf{x}}^2}&#92;)&lt;/span&gt;。其中&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;vec
{&#92;mathbf{x}}&#92;)&lt;/span&gt;是一个四面体的四个顶点的位置。因为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;begin{aligned}
&#92;frac{&#92;partial^2 &#92;Psi}{&#92;partial &#92;vec {&#92;mathbf{x}}^2}
&amp;amp;= &#92;frac{&#92;partial}{&#92;partial &#92;vec {&#92;mathbf{x}}} &#92;left(&#92;frac{&#92;partial
&#92;Psi}{&#92;partial &#92;vec {&#92;mathbf{x}}}&#92;right) &#92;&#92;
&amp;amp;= &#92;frac{&#92;partial}{&#92;partial &#92;vec {&#92;mathbf{x}}} &#92;left(&#92;frac{&#92;partial
&#92;Psi}{&#92;partial F}:&#92;frac{&#92;partial F}{&#92;partial &#92;vec {&#92;mathbf{x}}}&#92;right)
&#92;&#92;
&amp;amp;= &#92;frac{&#92;partial}{&#92;partial &#92;vec {&#92;mathbf{x}}} &#92;left(&#92;frac{&#92;partial
&#92;Psi}{&#92;partial F}&#92;right):&#92;frac{&#92;partial F}{&#92;partial &#92;vec {&#92;mathbf{x}}} +
&#92;frac{&#92;partial &#92;Psi}{&#92;partial F}:&#92;frac{&#92;partial^2 F}{&#92;partial &#92;vec
{&#92;mathbf{x}}^2}&#92;&#92;
&amp;amp;=&#92;frac{&#92;partial}{&#92;partial &#92;vec {&#92;mathbf{x}}}
&#92;left(P&#92;right):&#92;frac{&#92;partial F}{&#92;partial &#92;vec {&#92;mathbf{x}}}&#92;&#92;
&amp;amp;=(&#92;frac{&#92;partial F}{&#92;partial &#92;vec {&#92;mathbf{x}}}: &#92;frac{&#92;partial
P}{&#92;partial F}):&#92;frac{&#92;partial F}{&#92;partial &#92;vec {&#92;mathbf{x}}}
&#92;end{aligned}
&#92;]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/FEM/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/tags/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/tags/FEM/"/>
    
    <category term="软体模拟" scheme="https://grahamzen.github.io/tags/%E8%BD%AF%E4%BD%93%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>FEM中的梯度计算公式证明与matlab验证</title>
    <link href="https://grahamzen.github.io/2024/05/02/FEM-gradient/"/>
    <id>https://grahamzen.github.io/2024/05/02/FEM-gradient/</id>
    <published>2024-05-02T14:43:25.000Z</published>
    <updated>2024-12-27T11:45:14.716Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;证明1&quot;&gt;证明1&lt;/h2&gt;
&lt;p&gt;首先，已知&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;vec {&#92;mathbf{x}} = &#92;begin{bmatrix}
&#92;vec x_1 &amp;amp; &#92;vec x_2 &amp;amp; &#92;vec x_3
&#92;end{bmatrix}&#92;&#92;
D_s = &#92;begin{bmatrix}
&#92;vec x_1-&#92;vec x_4 &amp;amp; &#92;vec x_2-&#92;vec x_4 &amp;amp; &#92;vec x_3-&#92;vec x_4
&#92;end{bmatrix}&#92;&#92;
&#92;begin{aligned}
&amp;amp;&#92;frac{&#92;partial (D_s)_{kl}}{&#92;partial &#92;vec {&#92;mathbf{x}_{ij}}}
e_i&#92;otimes e_j&#92;otimes e_k&#92;otimes e_l&#92;&#92;
&amp;amp;=&#92;frac{&#92;partial &#92;vec {&#92;mathbf{x}}_{kl}}{&#92;partial &#92;vec
{&#92;mathbf{x}}_{ij}} e_i&#92;otimes e_j&#92;otimes e_k&#92;otimes e_l&#92;&#92;
&amp;amp;= &#92;delta_{ik}&#92;delta_{jl} e_i&#92;otimes e_j&#92;otimes e_k&#92;otimes e_l
&#92;end{aligned}
&#92;]&lt;/span&gt; 这里把&lt;span class=&quot;math inline&quot;&gt;&#92;(&#92;vec
{&#92;mathbf{x}}&#92;)&lt;/span&gt;后三列写成一个3x3的矩阵。&lt;span
class=&quot;math inline&quot;&gt;&#92;(D_m^{-1}&#92;)&lt;/span&gt;的分量表示为&lt;span
class=&quot;math inline&quot;&gt;&#92;(d_{mn}&#92;)&lt;/span&gt;，&lt;span
class=&quot;math inline&quot;&gt;&#92;(P&#92;)&lt;/span&gt;的分量表示为&lt;span
class=&quot;math inline&quot;&gt;&#92;(P_{rs}&#92;)&lt;/span&gt;，则能量密度函数&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;Psi&#92;)&lt;/span&gt;关于位置&lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;vec {&#92;mathbf{x}}&#92;)&lt;/span&gt; 的梯度为：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/FEM/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/tags/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/tags/FEM/"/>
    
    <category term="Projective Dynamics" scheme="https://grahamzen.github.io/tags/Projective-Dynamics/"/>
    
    <category term="软体模拟" scheme="https://grahamzen.github.io/tags/%E8%BD%AF%E4%BD%93%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>SVD</title>
    <link href="https://grahamzen.github.io/2023/12/24/Applied%20Numerical%20Algorithms/SVD/"/>
    <id>https://grahamzen.github.io/2023/12/24/Applied%20Numerical%20Algorithms/SVD/</id>
    <published>2023-12-24T04:29:22.000Z</published>
    <updated>2024-01-11T23:49:22.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;understading-the-geometry-of-ain-mathbbrmtimes-n&quot;&gt;Understading
the Geometry of &lt;span class=&quot;math inline&quot;&gt;&#92;(A&#92;in &#92;mathbb{R}^{m&#92;times
n}&#92;)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
A&#92;in &#92;mathbb{R}^{m&#92;times n} &#92;&#92;
x&#92;in &#92;mathbb{R}^n &#92;mapsto Ax &#92;in &#92;mathbb{R}^m
&#92;]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>QR iteration</title>
    <link href="https://grahamzen.github.io/2023/12/23/Applied%20Numerical%20Algorithms/QR-iteration/"/>
    <id>https://grahamzen.github.io/2023/12/23/Applied%20Numerical%20Algorithms/QR-iteration/</id>
    <published>2023-12-23T05:14:20.000Z</published>
    <updated>2023-12-24T05:58:07.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Assumption: &lt;span class=&quot;math inline&quot;&gt;&#92;(A &#92;in &#92;mathbb{R}^{n &#92;times
n}&#92;)&lt;/span&gt; is symmetric, no repeated eigenvalues &lt;span
class=&quot;math inline&quot;&gt;&#92;(&#92;lambda&#92;)&lt;/span&gt;s.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Eigenvalue iteration, deflation</title>
    <link href="https://grahamzen.github.io/2023/12/23/Applied%20Numerical%20Algorithms/Eigenvalue-iteration-deflation/"/>
    <id>https://grahamzen.github.io/2023/12/23/Applied%20Numerical%20Algorithms/Eigenvalue-iteration-deflation/</id>
    <published>2023-12-23T05:14:17.000Z</published>
    <updated>2023-12-23T23:15:31.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;two-basic-properties&quot;&gt;Two basic Properties&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt;: Every matrix &lt;span class=&quot;math inline&quot;&gt;&#92;(A
&#92;in &#92;mathbb{R}^{n &#92;times n}&#92;)&lt;/span&gt; has at least one (complex)
eigenvalue.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Applications of eigenvectors</title>
    <link href="https://grahamzen.github.io/2023/12/22/Applied%20Numerical%20Algorithms/Applications-of-eigenvectors/"/>
    <id>https://grahamzen.github.io/2023/12/22/Applied%20Numerical%20Algorithms/Applications-of-eigenvectors/</id>
    <published>2023-12-22T05:14:13.000Z</published>
    <updated>2023-12-23T23:06:50.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;很多时候需要把已有问题转化为特征值问题。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;有一个对称矩阵（有时候是对称半正定矩阵），我们想要找一个方便的基。&lt;/li&gt;
&lt;li&gt;具体的优化问题。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Column Space QR</title>
    <link href="https://grahamzen.github.io/2023/12/21/Applied%20Numerical%20Algorithms/QR-factorization/"/>
    <id>https://grahamzen.github.io/2023/12/21/Applied%20Numerical%20Algorithms/QR-factorization/</id>
    <published>2023-12-21T02:46:03.000Z</published>
    <updated>2023-12-22T03:13:23.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;high-level-idea&quot;&gt;High-Level Idea&lt;/h2&gt;
&lt;h3 id=&quot;why-qr&quot;&gt;Why QR?&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;begin{aligned}
cond A^T A &amp;amp;= ||A^T A|| &#92;cdot ||(A^T A)^{-1}||&#92;&#92;
&amp;amp;&#92;approx ||A^T|| &#92;cdot ||A|| &#92;cdot ||A^{-1}|| &#92;cdot ||A^{-T}||
&amp;amp;= cond A^2
&#92;end{aligned}
&#92;]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了避免计算&lt;span class=&quot;math inline&quot;&gt;&#92;(A^T
A&#92;)&lt;/span&gt;，我们可以使用QR分解。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Projective Dynamics 的local step实现推导</title>
    <link href="https://grahamzen.github.io/2023/12/20/local-step-inference/"/>
    <id>https://grahamzen.github.io/2023/12/20/local-step-inference/</id>
    <published>2023-12-20T08:08:06.000Z</published>
    <updated>2024-08-09T03:16:21.579Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/2601097.2601116&quot;&gt;Projective
Dynamics&lt;/a&gt;是一种用于软体模拟的方法，算法分为local step和global
step两个部分。其中local step可以对于每个四面体约束并行计算，global
step只需要求解一个线性方程组，而他的矩阵非常特殊，是一个Gram矩阵，因此可以预先用Cholesky分解。本文主要介绍local
step的实现的推导过程。用Corotated strain model的CUDA的实现作为例子。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/FEM/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/tags/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="FEM" scheme="https://grahamzen.github.io/tags/FEM/"/>
    
    <category term="Projective Dynamics" scheme="https://grahamzen.github.io/tags/Projective-Dynamics/"/>
    
    <category term="软体模拟" scheme="https://grahamzen.github.io/tags/%E8%BD%AF%E4%BD%93%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Condition number for linear systems</title>
    <link href="https://grahamzen.github.io/2023/12/20/Applied%20Numerical%20Algorithms/Condition-number-for-linear-systems/"/>
    <id>https://grahamzen.github.io/2023/12/20/Applied%20Numerical%20Algorithms/Condition-number-for-linear-systems/</id>
    <published>2023-12-20T04:06:16.000Z</published>
    <updated>2023-12-20T18:55:11.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;sensitivity-and-conditioning&quot;&gt;Sensitivity and Conditioning&lt;/h2&gt;
&lt;p&gt;Gaussian elimination works in theory, but what about floating point
precision?&lt;/p&gt;
&lt;p&gt;How much can we trust &lt;span class=&quot;math inline&quot;&gt;&#92;(x_0&#92;)&lt;/span&gt; if
&lt;span class=&quot;math inline&quot;&gt;&#92;(0&amp;lt;||Ax_0 - b||_2 &#92;ll 1&#92;)&lt;/span&gt;(backwards
error)?&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Cholesky factorization, sparse matrices</title>
    <link href="https://grahamzen.github.io/2023/12/17/Applied%20Numerical%20Algorithms/Cholesky-factorization-sparse-matrices/"/>
    <id>https://grahamzen.github.io/2023/12/17/Applied%20Numerical%20Algorithms/Cholesky-factorization-sparse-matrices/</id>
    <published>2023-12-17T10:23:19.000Z</published>
    <updated>2023-12-20T18:55:43.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;structured-linear-systems&quot;&gt;Structured Linear Systems&lt;/h2&gt;
&lt;p&gt;Gaussian elimination and/or LU can solve all the example problems
above. But these systems can have special properties that make them
easier or stabler to solve.&lt;/p&gt;
&lt;p&gt;Today&#39;s example: Positive definite, sparsity.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Linear Systems and LU</title>
    <link href="https://grahamzen.github.io/2023/12/17/Applied%20Numerical%20Algorithms/Linear-Systems-and-LU/"/>
    <id>https://grahamzen.github.io/2023/12/17/Applied%20Numerical%20Algorithms/Linear-Systems-and-LU/</id>
    <published>2023-12-17T04:50:28.000Z</published>
    <updated>2023-12-20T18:56:55.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;linear-systems&quot;&gt;Linear Systems&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[
&#92;begin{aligned}
    Ax &amp;amp;= b &#92;&#92;
    A &amp;amp;&#92;in &#92;mathbb{R}^{n &#92;times n} &#92;&#92;
    x &amp;amp;&#92;in &#92;mathbb{R}^n &#92;&#92;
    b &amp;amp;&#92;in &#92;mathbb{R}^n
&#92;end{aligned}
&#92;]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Introduction, number systems, measuring error</title>
    <link href="https://grahamzen.github.io/2023/12/16/Applied%20Numerical%20Algorithms/Introduction-number-systems-measuring-error/"/>
    <id>https://grahamzen.github.io/2023/12/16/Applied%20Numerical%20Algorithms/Introduction-number-systems-measuring-error/</id>
    <published>2023-12-16T07:47:52.000Z</published>
    <updated>2023-12-20T17:31:00.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Mathematically correct != numerically sound. Using Tolerance:
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; y = x / &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;fabs&lt;/span&gt;(x-y*&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;) &amp;lt; numeric_limits&amp;lt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;&amp;gt;::&lt;span class=&quot;built_in&quot;&gt;epsilon&lt;/span&gt;())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;They are equal&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cout &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot;They are not equal&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="Applied Numerical Algorithms" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/Applied-Numerical-Algorithms/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="数值计算" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="线性代数" scheme="https://grahamzen.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>对LLVM的Pass进行调试的vscode配置</title>
    <link href="https://grahamzen.github.io/2023/11/20/llvm-vscode/"/>
    <id>https://grahamzen.github.io/2023/11/20/llvm-vscode/</id>
    <published>2023-11-20T04:26:12.000Z</published>
    <updated>2023-11-20T17:42:30.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;文件夹结构&quot;&gt;文件夹结构&lt;/h2&gt;
&lt;p&gt;安装LLVM的过程省去，假设当前目录下有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMakeLists.txt文件；编译pass&lt;/li&gt;
&lt;li&gt;include文件夹：pass的头文件&lt;/li&gt;
&lt;li&gt;src文件夹；pass的源码&lt;/li&gt;
&lt;li&gt;test文件夹：用于静态分析pass的测试代码（.c文件）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="软件分析" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
    
    <category term="LLVM" scheme="https://grahamzen.github.io/tags/LLVM/"/>
    
    <category term="vscode" scheme="https://grahamzen.github.io/tags/vscode/"/>
    
    <category term="静态分析" scheme="https://grahamzen.github.io/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>张量</title>
    <link href="https://grahamzen.github.io/2023/11/19/tensor/"/>
    <id>https://grahamzen.github.io/2023/11/19/tensor/</id>
    <published>2023-11-19T15:32:17.000Z</published>
    <updated>2023-12-17T23:09:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;对于三维空间中的各向同性材料，弹性模量张量（Elastic Modulus
Tensor）可以视为一个&lt;span class=&quot;math inline&quot;&gt;&#92;(3 &#92;times
3&#92;)&lt;/span&gt;矩阵，其中每个元素本身又是一个 &lt;span class=&quot;math inline&quot;&gt;&#92;(3
&#92;times 3&#92;)&lt;/span&gt;
的矩阵。这样的表示反映了张量的四阶本质，即它有四个索引。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="微积分" scheme="https://grahamzen.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>GAMES103:刚体模拟笔记</title>
    <link href="https://grahamzen.github.io/2023/04/09/rigidBody-note/"/>
    <id>https://grahamzen.github.io/2023/04/09/rigidBody-note/</id>
    <published>2023-04-09T09:50:21.000Z</published>
    <updated>2024-08-09T03:16:21.579Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;math&quot;&gt;2 Math&lt;/h1&gt;
&lt;h2 id=&quot;tetrahedral-volume&quot;&gt;Tetrahedral Volume&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;../../../../../images/GAMES103/1681077071804.png&quot;
alt=&quot;1681077071804&quot; /&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077071804&lt;/figcaption&gt;
&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="仿真" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/"/>
    
    <category term="GAMES103" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E4%BB%BF%E7%9C%9F/GAMES103/"/>
    
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="最优化" scheme="https://grahamzen.github.io/tags/%E6%9C%80%E4%BC%98%E5%8C%96/"/>
    
    <category term="模拟" scheme="https://grahamzen.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="刚体" scheme="https://grahamzen.github.io/tags/%E5%88%9A%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>VkPresentModeKHR-呈现模式</title>
    <link href="https://grahamzen.github.io/2023/03/07/VkPresentModeKHR/"/>
    <id>https://grahamzen.github.io/2023/03/07/VkPresentModeKHR/</id>
    <published>2023-03-07T06:15:11.000Z</published>
    <updated>2023-12-17T23:09:10.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在构建交换链 &lt;code&gt;vk::SwapchainCreateInfoKHR&lt;/code&gt;时，有一个设置是
&lt;code&gt;VkPresentModeKHR&lt;/code&gt;。根据官方手册&lt;a
href=&quot;https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentModeKHR.html&quot;&gt;VkPresentModeKHR(3)
Manual Page&lt;/a&gt;，呈现模式有6种。&lt;/p&gt;
&lt;h2 id=&quot;相关术语&quot;&gt;相关术语&lt;/h2&gt;
&lt;h3 id=&quot;垂直空白间隙vertical-blank-interval&quot;&gt;垂直空白间隙(Vertical Blank
Interval)&lt;/h3&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="图形API" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2API/"/>
    
    <category term="Vulkan" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2API/Vulkan/"/>
    
    
    <category term="swapchian" scheme="https://grahamzen.github.io/tags/swapchian/"/>
    
    <category term="交换链" scheme="https://grahamzen.github.io/tags/%E4%BA%A4%E6%8D%A2%E9%93%BE/"/>
    
    <category term="Vulkan" scheme="https://grahamzen.github.io/tags/Vulkan/"/>
    
  </entry>
  
  <entry>
    <title>Bspline</title>
    <link href="https://grahamzen.github.io/2023/03/04/BSpline/"/>
    <id>https://grahamzen.github.io/2023/03/04/BSpline/</id>
    <published>2023-03-04T14:13:56.000Z</published>
    <updated>2024-08-09T15:33:56.708Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;bspline上任意点的计算公式&quot;&gt;Bspline上任意点的计算公式&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5620" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/CIS-5620/"/>
    
    
    <category term="Bspline" scheme="https://grahamzen.github.io/tags/Bspline/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="几何处理" scheme="https://grahamzen.github.io/tags/%E5%87%A0%E4%BD%95%E5%A4%84%E7%90%86/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5620" scheme="https://grahamzen.github.io/tags/CIS-5620/"/>
    
  </entry>
  
  <entry>
    <title>cmake笔记</title>
    <link href="https://grahamzen.github.io/2023/03/04/cmake-related/"/>
    <id>https://grahamzen.github.io/2023/03/04/cmake-related/</id>
    <published>2023-03-04T10:53:03.000Z</published>
    <updated>2023-12-20T06:17:56.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;记录一个&lt;code&gt;CMake&lt;/code&gt;速查表。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;cmake&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cmake -B build -DCMAKE_BUILD_TYPE=Release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake --build build -j8 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;常用函数&quot;&gt;常用函数&lt;/h2&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MISC" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/MISC/"/>
    
    <category term="项目管理" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/MISC/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="cmake" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/MISC/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/cmake/"/>
    
    
    <category term="cmake" scheme="https://grahamzen.github.io/tags/cmake/"/>
    
  </entry>
  
</feed>
