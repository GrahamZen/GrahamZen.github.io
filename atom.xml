<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gehan Zheng&#39;s blog</title>
  
  
  <link href="https://grahamzen.github.io/atom.xml" rel="self"/>
  
  <link href="https://grahamzen.github.io/"/>
  <updated>2023-11-20T17:42:30.246Z</updated>
  <id>https://grahamzen.github.io/</id>
  
  <author>
    <name>Gehan Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对LLVM的Pass进行调试的vscode配置</title>
    <link href="https://grahamzen.github.io/2023/11/19/llvm-vscode/"/>
    <id>https://grahamzen.github.io/2023/11/19/llvm-vscode/</id>
    <published>2023-11-20T04:26:12.000Z</published>
    <updated>2023-11-20T17:42:30.246Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;文件夹结构&quot;&gt;文件夹结构&lt;/h2&gt;
&lt;p&gt;安装LLVM的过程省去，假设当前目录下有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMakeLists.txt文件；编译pass&lt;/li&gt;
&lt;li&gt;include文件夹：pass的头文件&lt;/li&gt;
&lt;li&gt;src文件夹；pass的源码&lt;/li&gt;
&lt;li&gt;test文件夹：用于静态分析pass的测试代码（.c文件）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="软件分析" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
    
    <category term="LLVM" scheme="https://grahamzen.github.io/tags/LLVM/"/>
    
    <category term="vscode" scheme="https://grahamzen.github.io/tags/vscode/"/>
    
    <category term="静态分析" scheme="https://grahamzen.github.io/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>张量</title>
    <link href="https://grahamzen.github.io/2023/11/19/tensor/"/>
    <id>https://grahamzen.github.io/2023/11/19/tensor/</id>
    <published>2023-11-19T15:32:17.000Z</published>
    <updated>2023-11-20T17:58:59.286Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="微积分" scheme="https://grahamzen.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>GAMES103:刚体模拟笔记</title>
    <link href="https://grahamzen.github.io/2023/04/09/GAMES103/"/>
    <id>https://grahamzen.github.io/2023/04/09/GAMES103/</id>
    <published>2023-04-09T09:50:21.000Z</published>
    <updated>2023-11-20T18:02:36.231Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;math&quot;&gt;2 Math&lt;/h1&gt;
&lt;h2 id=&quot;tetrahedral-volume&quot;&gt;Tetrahedral Volume&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;../images/GAMES103/1681077071804.png&quot; alt=&quot;1681077071804&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077071804&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;../images/GAMES103/1681077089478.png&quot; alt=&quot;1681077089478&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077089478&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;barycentric-weights&quot;&gt;Barycentric Weights&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;../images/GAMES103/1681077102213.png&quot; alt=&quot;1681077102213&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077102213&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;../images/GAMES103/1681077142508.png&quot; alt=&quot;1681077142508&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077142508&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;particle-triangle-intersection&quot;&gt;Particle-triangle
Intersection&lt;/h2&gt;
&lt;p&gt;First, we find 𝑡 when the particle hits the plane:&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;../images/GAMES103/1681077167578.png&quot; alt=&quot;1681077167578&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;1681077167578&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We then check if 𝐩(𝑡) is inside or not.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="模拟" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="刚体" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E6%A8%A1%E6%8B%9F/%E5%88%9A%E4%BD%93/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="最优化" scheme="https://grahamzen.github.io/tags/%E6%9C%80%E4%BC%98%E5%8C%96/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="刚体" scheme="https://grahamzen.github.io/tags/%E5%88%9A%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>VkPresentModeKHR-呈现模式</title>
    <link href="https://grahamzen.github.io/2023/03/07/VkPresentModeKHR/"/>
    <id>https://grahamzen.github.io/2023/03/07/VkPresentModeKHR/</id>
    <published>2023-03-07T06:15:11.000Z</published>
    <updated>2023-03-14T01:43:52.980Z</updated>
    
    
    <summary type="html">&lt;p&gt;在构建交换链 &lt;code&gt;vk::SwapchainCreateInfoKHR&lt;/code&gt;时，有一个设置是
&lt;code&gt;VkPresentModeKHR&lt;/code&gt;。根据官方手册&lt;a href=&quot;https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPresentModeKHR.html&quot;&gt;VkPresentModeKHR(3)
Manual Page&lt;/a&gt;，呈现模式有6种。&lt;/p&gt;
&lt;h2 id=&quot;相关术语&quot;&gt;相关术语&lt;/h2&gt;
&lt;h3 id=&quot;垂直空白间隙vertical-blank-interval&quot;&gt;垂直空白间隙(Vertical Blank
Interval)&lt;/h3&gt;
&lt;p&gt;指在扫描线技术中（例如隔行扫描）电子束从前一画面的右下角移至后一画面的左上角时的时间差所引起的空白画面。这一情况出现在使用阴极射线管的显示器、使用视频图形阵列标准的显示器中。下面简称VBI。&lt;/p&gt;
&lt;p&gt;在现代的显示器（比如LCD）中，虽然没有电子枪进行隔行扫描，但是同时控制上百万个像素点是不可能的，还是需要动态扫描进行刷新。这个刷新过程可以理解为从上往下的逐行扫描。因此VBI的含义是一段可以安全的换出&quot;显示到显示器上的图像&quot;的时间，可以简单理解为在从上到下扫描完帧缓冲，即可以认为屏幕上显示了完整画面（实际上某些情况下有撕裂）后的一段空白时间。这个扫描过程只受帧同步信号（VSYNC）影响。&lt;/p&gt;
&lt;h3 id=&quot;撕裂tearing&quot;&gt;撕裂(tearing)&lt;/h3&gt;
&lt;p&gt;在显示引擎正在显示一张图像时，如果它不再显示当前这张图像，而是显示另一张图像（某些模式下会有这样做），那么屏幕上有一部分是旧的图像（比如上面一半），另一部分是新的图像（比如下面一半）。这个现象就是撕裂。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="图形API" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2API/"/>
    
    <category term="Vulkan" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2API/Vulkan/"/>
    
    
    <category term="swapchian" scheme="https://grahamzen.github.io/tags/swapchian/"/>
    
    <category term="交换链" scheme="https://grahamzen.github.io/tags/%E4%BA%A4%E6%8D%A2%E9%93%BE/"/>
    
    <category term="Vulkan" scheme="https://grahamzen.github.io/tags/Vulkan/"/>
    
  </entry>
  
  <entry>
    <title>Bspline</title>
    <link href="https://grahamzen.github.io/2023/03/04/BSpline/"/>
    <id>https://grahamzen.github.io/2023/03/04/BSpline/</id>
    <published>2023-03-04T14:13:56.000Z</published>
    <updated>2023-11-20T18:06:46.364Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;bspline上任意点的计算公式&quot;&gt;Bspline上任意点的计算公式&lt;/h2&gt;
&lt;p&gt;Bspline和贝塞尔曲线类似，也是将所有控制点用基函数&lt;span class=&quot;math inline&quot;&gt;\(N_{i}^{k}\)&lt;/span&gt;进行加权得到曲线上的点。也就是说，Bspline有&lt;span class=&quot;math inline&quot;&gt;\(n+1\)&lt;/span&gt;个控制点，&lt;span class=&quot;math inline&quot;&gt;\(n+1\)&lt;/span&gt;个基函数，&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;为次数（t在基函数中出现的最高次幂），&lt;span class=&quot;math inline&quot;&gt;\(i\in[0,n]\)&lt;/span&gt;。比如有10个控制点&lt;span class=&quot;math inline&quot;&gt;\(p_0,p_1,p_2,p_3,...,p_{9}\)&lt;/span&gt;，使用4次的Bspline基函数&lt;span class=&quot;math inline&quot;&gt;\(N^{4}_{0}(t),N^{4}_{1}(t),N^{4}_{2}(t),N^{4}_{3}(t),...,N^{4}_{9}(t)\)&lt;/span&gt;，那么曲线上任意一点可以表示为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\begin{align*}
f(t)&amp;amp;=\sum_{i=0}^{n}N_{i}^{k}(t)p_i\\
    &amp;amp;=N_{0}^{4}p_0+N_{1}^{4}p_1+N_{2}^{4}p_2...+N_{9}^{4}p_{9}\tag{1}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="建模" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="CIS-5620" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%BB%BA%E6%A8%A1/CIS-5620/"/>
    
    
    <category term="Bspline" scheme="https://grahamzen.github.io/tags/Bspline/"/>
    
  </entry>
  
  <entry>
    <title>cmake笔记</title>
    <link href="https://grahamzen.github.io/2023/03/04/cmake-related/"/>
    <id>https://grahamzen.github.io/2023/03/04/cmake-related/</id>
    <published>2023-03-04T10:53:03.000Z</published>
    <updated>2023-03-07T17:51:50.127Z</updated>
    
    
    <summary type="html">&lt;p&gt;记录一个&lt;code&gt;CMake&lt;/code&gt;速查表。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;cmake&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cmake -B build -DCMAKE_BUILD_TYPE=Release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake --build build -j8 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;常用函数&quot;&gt;常用函数&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 8%&quot;&gt;
&lt;col style=&quot;width: 74%&quot;&gt;
&lt;col style=&quot;width: 16%&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;set(CMAKE_CXX_STANDARD 11)&lt;/td&gt;
&lt;td&gt;为变量赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;option&lt;/td&gt;
&lt;td&gt;option(USE_VULKAN_UTILS &quot;use custom vulkan utilities&quot; ON)&lt;/td&gt;
&lt;td&gt;选项（和set功能相同）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;include&lt;/td&gt;
&lt;td&gt;include(Ctest)&lt;/td&gt;
&lt;td&gt;包含cmake文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;cmake_minimum_required&lt;/td&gt;
&lt;td&gt;cmake_minimum_required(VERSION 3.10)&lt;/td&gt;
&lt;td&gt;cmake版本指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;project&lt;/td&gt;
&lt;td&gt;project(VulkanToy VERSION 1.0)&lt;/td&gt;
&lt;td&gt;项目名称，可以包括版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;add_executable&lt;/td&gt;
&lt;td&gt;add_executable(VulkanToy main.cpp)&lt;/td&gt;
&lt;td&gt;添加一个要生成可执行文件的目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;add_library&lt;/td&gt;
&lt;td&gt;add_library(VulkanUtils utils.cpp)&lt;/td&gt;
&lt;td&gt;添加一个要生成库的目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;add_subdirectory&lt;/td&gt;
&lt;td&gt;add_subdirectory(VulkanUtils)&lt;/td&gt;
&lt;td&gt;添加子目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;find_package&lt;/td&gt;
&lt;td&gt;find_package(Vulkan REQUIRED)&lt;/td&gt;
&lt;td&gt;查找包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;aux_source_directory&lt;/td&gt;
&lt;td&gt;aux_source_directory(. sources)&lt;/td&gt;
&lt;td&gt;自动搜集有需要的后缀名的文件放入 &lt;code&gt;sources&lt;/code&gt;变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;target_include_directories&lt;/td&gt;
&lt;td&gt;target_include_directories(test PRIVATE VulkanUtils)&lt;/td&gt;
&lt;td&gt;包含子库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;target_link_libraries&lt;/td&gt;
&lt;td&gt;target_link_libraries(VulkanToy utilTest)&lt;/td&gt;
&lt;td&gt;链接子库目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;target_add_definitions&lt;/td&gt;
&lt;td&gt;target_add_definitions(VulkanToy PUBLIC MY_MACRO=1)&lt;/td&gt;
&lt;td&gt;添加一个宏定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;target_compile_options&lt;/td&gt;
&lt;td&gt;target_compile_options(VulkanToy PUBLIC -fopenmp)&lt;/td&gt;
&lt;td&gt;添加编译器命令行选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;target_sources&lt;/td&gt;
&lt;td&gt;target_sources(VulkanToy PUBLIC test.cpp other.cpp)&lt;/td&gt;
&lt;td&gt;添加要编译的源文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;include_directories&lt;/td&gt;
&lt;td&gt;include_directories(/opt/cuda/include)&lt;/td&gt;
&lt;td&gt;添加头文件搜索目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;link_directories&lt;/td&gt;
&lt;td&gt;link_directories(/opt/cuda)&lt;/td&gt;
&lt;td&gt;添加库文件的搜索路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;add_definitions&lt;/td&gt;
&lt;td&gt;add_definitions(MY_MACRO=1)&lt;/td&gt;
&lt;td&gt;添加一个宏定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;add_compile_options&lt;/td&gt;
&lt;td&gt;add_compile_options(-fopenmp)&lt;/td&gt;
&lt;td&gt;添加编译器命令行选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;configure_file&lt;/td&gt;
&lt;td&gt;configure_file(VulkanToyConfig.h.in VulkanToyConfig.h)&lt;/td&gt;
&lt;td&gt;配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;install&lt;/td&gt;
&lt;td&gt;install(TARGETS VulkanToy DESTINATION bin)&lt;/td&gt;
&lt;td&gt;安装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;enable_testing&lt;/td&gt;
&lt;td&gt;enable_testing()&lt;/td&gt;
&lt;td&gt;启动测试功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;add_test&lt;/td&gt;
&lt;td&gt;add_test(NAME VulkanToyRuns COMMAND VulkanToy)&lt;/td&gt;
&lt;td&gt;添加一个测试&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;set_tests_properties&lt;/td&gt;
&lt;td&gt;set_tests_properties(VulkanToyRuns PROPERTIES
PASS_REGULAR_EXPRESSION &quot;.*&quot;)&lt;/td&gt;
&lt;td&gt;设置测试的属性（比如结果是否满足条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;add_custom_command&lt;/td&gt;
&lt;td&gt;add_custom_command(TARGET${target_name} POST_BUILD COMMAND
${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/vert.spv $&lt;a href=&quot;TARGET_FILE_DIR:$%7Btarget_name%7D&quot;&gt;TARGET_FILE_DIR:${target_name}&lt;/a&gt;(TARGET_FILE_DIR:${target_name}))&lt;/td&gt;
&lt;td&gt;自定义命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目管理" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="cmake" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/cmake/"/>
    
    
    <category term="cmake" scheme="https://grahamzen.github.io/tags/cmake/"/>
    
  </entry>
  
  <entry>
    <title>渲染方程及BSDFs</title>
    <link href="https://grahamzen.github.io/2023/02/09/rendering-equation/"/>
    <id>https://grahamzen.github.io/2023/02/09/rendering-equation/</id>
    <published>2023-02-09T17:42:42.000Z</published>
    <updated>2023-02-21T17:28:53.139Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;光传播方程the-light-transport-equation-lte&quot;&gt;光传播方程(The Light
Transport Equation, LTE)&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
L_o(p,\omega_o)=L_e(p,\omega_o)+\int_{s^2}f(p,\omega_o,\omega_i)|\cos\theta_i|d\omega_i
\]&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5610" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/CIS-5610/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="光线跟踪" scheme="https://grahamzen.github.io/tags/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA/"/>
    
    <category term="蒙特卡洛" scheme="https://grahamzen.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B/"/>
    
  </entry>
  
  <entry>
    <title>渲染方程背景知识</title>
    <link href="https://grahamzen.github.io/2023/02/09/rendering-equation-bg/"/>
    <id>https://grahamzen.github.io/2023/02/09/rendering-equation-bg/</id>
    <published>2023-02-09T15:49:50.000Z</published>
    <updated>2023-03-05T17:04:31.606Z</updated>
    
    
    <summary type="html">&lt;p&gt;本来想写BSDF的推导，但是发现基础知识很多，正好整理一下作为复习。部分内容参考&lt;a href=&quot;https://www.pbr-book.org/&quot;&gt;Physically Based Rendering, Third
Edition&lt;/a&gt;，非常推荐阅读。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5610" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/CIS-5610/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="概率论" scheme="https://grahamzen.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    <category term="蒙特卡洛" scheme="https://grahamzen.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B/"/>
    
  </entry>
  
  <entry>
    <title>导数</title>
    <link href="https://grahamzen.github.io/2023/02/04/derivative/"/>
    <id>https://grahamzen.github.io/2023/02/04/derivative/</id>
    <published>2023-02-04T13:52:00.000Z</published>
    <updated>2023-02-10T06:41:13.854Z</updated>
    
    
    <summary type="html">&lt;p&gt;标量求导和向量求导是矩阵求导的特殊情况。向量求导使用的频率较高。对向量求导时运用乘法和除法公式时会出现标量求导，这里记录一下各种求导的结果。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="微积分" scheme="https://grahamzen.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>光线投射（raycast）公式中的far-clip</title>
    <link href="https://grahamzen.github.io/2023/01/14/raycast-formula/"/>
    <id>https://grahamzen.github.io/2023/01/14/raycast-formula/</id>
    <published>2023-01-14T09:01:49.000Z</published>
    <updated>2023-01-14T23:05:28.251Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;光线投射公式&quot;&gt;&lt;a href=&quot;#光线投射公式&quot; class=&quot;headerlink&quot; title=&quot;光线投射公式&quot;&gt;&lt;/a&gt;光线投射公式&lt;/h2&gt;&lt;p&gt;从相机发出一条光线，穿过与相机距离为1的屏幕上的某点，已知相机参数和点在屏幕空间上的位置&lt;code&gt;(sx,sy)&lt;/code&gt;，计算世界空间中投影到该点的对应点的坐标的公式为：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
P = ViewMat^{-1} * ProjMat^{-1} * ((sx, sy, 1, 1) * farClip).&lt;/script&gt;&lt;p&gt;使用下面的公式得到的结果实际上是一样的。&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
P = ViewMat^{-1} * ProjMat^{-1} * (sx, sy, 1, 1),&lt;/script&gt;&lt;p&gt;但是需要对向量进行规范化，即：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
P=[p.x,p.y,p.z,p.w]/p.w.&lt;/script&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="CIS-5610" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/CIS-5610/"/>
    
    
    <category term="计算机图形学" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="光线跟踪" scheme="https://grahamzen.github.io/tags/%E5%85%89%E7%BA%BF%E8%B7%9F%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>程序优化</title>
    <link href="https://grahamzen.github.io/2023/01/10/program-optimization/"/>
    <id>https://grahamzen.github.io/2023/01/10/program-optimization/</id>
    <published>2023-01-10T14:08:53.000Z</published>
    <updated>2023-01-11T05:12:02.454Z</updated>
    
    
    <summary type="html">&lt;p&gt;C代码中有许多比较通用的可以优化的地方。其中大部分优化方式在其他语言中也是有效的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机组成原理" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>浮点数</title>
    <link href="https://grahamzen.github.io/2023/01/05/float-number/"/>
    <id>https://grahamzen.github.io/2023/01/05/float-number/</id>
    <published>2023-01-05T14:03:16.000Z</published>
    <updated>2023-01-06T03:13:49.739Z</updated>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机组成原理" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>跨页表格的题注</title>
    <link href="https://grahamzen.github.io/2022/05/06/table-caption-continued/"/>
    <id>https://grahamzen.github.io/2022/05/06/table-caption-continued/</id>
    <published>2022-05-06T05:28:06.000Z</published>
    <updated>2023-11-20T17:39:47.601Z</updated>
    
    
    <summary type="html">&lt;p&gt;使用latex写文章，尤其是和图像相关的文章时，常常会遇到需要用图片表格的情况。为了能够跨页，我们可以使用&lt;code&gt;longtable&lt;/code&gt;。因为图片较大，如果没有刻意缩小，那么表格就会跨页。有的文章接收方会要求跨页表格在第二页顶部增加额外的题注来接上上一页的表格，以及第一个题注在表格顶部。&lt;/p&gt;
&lt;h2 id=&quot;跨页题注&quot;&gt;跨页题注&lt;/h2&gt;
&lt;p&gt;https://tex.stackexchange.com/questions/115195/table-captions-continued
给出了一个解决方法。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="文章排版" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%96%87%E7%AB%A0%E6%8E%92%E7%89%88/"/>
    
    
    <category term="latex" scheme="https://grahamzen.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>在latex项目里用plotneuralnet</title>
    <link href="https://grahamzen.github.io/2022/03/16/plotneuralnet-in-a-project/"/>
    <id>https://grahamzen.github.io/2022/03/16/plotneuralnet-in-a-project/</id>
    <published>2022-03-17T03:48:26.000Z</published>
    <updated>2023-01-04T08:51:24.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;plotneuralnet是一个绘制神经网络的工具，使用该工具可以将python脚本转换为latex脚本，编译得到pdf。需要以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载plotneuralnet的github源码，&lt;a href=&quot;https://github.com/HarisIqbal88/PlotNeuralNet&quot;&gt;https://github.com/HarisIqbal88/PlotNeuralNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;找一个latex环境，可以是win/linux/overleaf，前两种需要安装latex的环境，比如texlive，可以参考&lt;a href=&quot;https://github.com/luanshiyinyang/PlotNeuralNet，texlive在这里可以找到https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/。&quot;&gt;https://github.com/luanshiyinyang/PlotNeuralNet，texlive在这里可以找到https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;写好脚本&lt;code&gt;my_arch.py&lt;/code&gt;（名字可以随便起）放在源码的pyexamples文件夹下，编写的教程可以在其他地方搜到。&lt;/li&gt;
&lt;li&gt;直接用&lt;code&gt;python&lt;/code&gt;运行&lt;code&gt;python my_arch.py&lt;/code&gt;，可以看到目录下的&lt;code&gt;my_arch.tex&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="工具使用" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="latex" scheme="https://grahamzen.github.io/tags/latex/"/>
    
    <category term="神经网络可视化" scheme="https://grahamzen.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JOKR笔记</title>
    <link href="https://grahamzen.github.io/2021/12/13/JOKR-report/"/>
    <id>https://grahamzen.github.io/2021/12/13/JOKR-report/</id>
    <published>2021-12-14T03:15:01.000Z</published>
    <updated>2023-01-04T08:51:24.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;JOKR-Joint-Keypoint-Representation-for-Unsupervised-Cross-Domain-Motion-Retargeting&quot;&gt;&lt;a href=&quot;#JOKR-Joint-Keypoint-Representation-for-Unsupervised-Cross-Domain-Motion-Retargeting&quot; class=&quot;headerlink&quot; title=&quot;JOKR: Joint Keypoint Representation for Unsupervised Cross-Domain Motion Retargeting&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://arxiv.org/abs/2106.09679&quot;&gt;JOKR: Joint Keypoint Representation for Unsupervised Cross-Domain Motion Retargeting&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;原视频和目标视频形状不同时，之前专注于特定对象先验的方法就会失败，作者提出联合关键点表达可以捕捉原视频和目标视频都有的动作，而且不需要物体先验或者数据采集。使用domain confusion项有利于对于两个domain的动作的一致的部分的解耦，可区分的外观和动作使得捕捉其中一个视频动作同时描绘另一个视频的风格的视频得以生成。&lt;/p&gt;
&lt;p&gt;为处理物体有不同比例缩放或者不同方向的情形，作者应用了JOKR之间的仿射变换。这使得表达具有仿射不变性。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图像动画" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%83%8F%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="图像动画" scheme="https://grahamzen.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8A%A8%E7%94%BB/"/>
    
    <category term="计算机视觉" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>三篇图像动画论文的比较(FOMM,AA,SDEMT)</title>
    <link href="https://grahamzen.github.io/2021/12/13/FOMM-AA-SDEMT/"/>
    <id>https://grahamzen.github.io/2021/12/13/FOMM-AA-SDEMT/</id>
    <published>2021-12-14T02:45:19.000Z</published>
    <updated>2023-01-04T05:52:53.631Z</updated>
    
    
    <summary type="html">&lt;p&gt;FOMM和AA是很经典的论文，都来自作者Aliaksandr Siarohin，最近有一篇新论文在此基础上做了较大的改进，给出的效果看起来也很好，因此总结三个论文的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2003.00196&quot;&gt;FOMM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2104.11280&quot;&gt;AA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/2110.04658&quot;&gt;Self-appearance-aided Differential Evolution for Motion Transfer&lt;/a&gt;</summary>
    
    
    
    <category term="学习" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文笔记" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图像动画" scheme="https://grahamzen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%83%8F%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="图像动画" scheme="https://grahamzen.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8A%A8%E7%94%BB/"/>
    
    <category term="计算机视觉" scheme="https://grahamzen.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://grahamzen.github.io/2021/12/12/hello-world/"/>
    <id>https://grahamzen.github.io/2021/12/12/hello-world/</id>
    <published>2021-12-12T14:09:13.000Z</published>
    <updated>2023-01-04T08:51:24.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;是时候建个blog了，参考的&lt;a href=&quot;https://www.bilibili.com/read/cv12633102&quot;&gt;2021最全hexo搭建博客+matery美化+使用&lt;/a&gt;，写的比较详细。踩的坑都在main和master分支上。以后大概主要写学习相关的文章，记录一下免得忘记。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://grahamzen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://grahamzen.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
